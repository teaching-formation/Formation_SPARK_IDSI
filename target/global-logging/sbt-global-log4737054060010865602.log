[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_211)
[debug]       Load.loadUnit: plugins took 1408.8872ms
[debug]       Load.loadUnit: defsScala took 0.809ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 53.7183 ms
[debug]           Load.resolveProject(global-plugins) took 501.7986ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\AGRIDEM\.sbt\1.0\plugins, plugins: List(<none>))) took 697.976ms
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 1082.2747ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.8502ms
[debug]     Load.loadUnit(file:/C:/Users/AGRIDEM/.sbt/1.0/plugins/, ...) took 2518.0064ms
[debug]   Load.apply: load took 8070.1174ms
[debug]   Load.apply: resolveProjects took 19.9789ms
[debug]   Load.apply: finalTransforms took 478.7644ms
[debug]   Load.apply: config.delegates took 41.2681ms
[debug]   Load.apply: Def.make(settings)... took 9124.1379ms
[debug]   Load.apply: structureIndex took 1007.3141ms
[debug]   Load.apply: mkStreams took 6.5639ms
[info] loading global plugins from C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 187906.6909ms
[debug]           Load.loadUnit: plugins took 752.5984ms
[debug]           Load.loadUnit: defsScala took 0.0286ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug]             Load.loadUnit: mkEval took 430.8363ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.2958 ms
[info] loading settings for project formation_spark_idsi-build from idea2.sbt ...
[debug]               Load.resolveProject(formation_spark_idsi-build) took 26.1934ms
[debug]             Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi-build, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, plugins: List(<none>))) took 37.2449ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: (formation_spark_idsi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6856.3031ms
[debug]           Load.loadUnit: cleanEvalClasses took 873.5559ms
[debug]         Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/project/, ...) took 8486.0046ms
[debug]       Load.apply: load took 8490.0883ms
[debug]       Load.apply: resolveProjects took 0.2994ms
[debug]       Load.apply: finalTransforms took 38.4512ms
[debug]       Load.apply: config.delegates took 2.2789ms
[debug]       Load.apply: Def.make(settings)... took 617.5103ms
[debug]       Load.apply: structureIndex took 162.7149ms
[debug]       Load.apply: mkStreams took 0.0069ms
[info] loading project definition from C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 26751.2128ms
[debug]     Load.loadUnit: defsScala took 0.0097ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI
[debug]       Load.loadUnit: mkEval took 1.0271ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 27.9731 ms
[info] loading settings for project formation_spark_idsi from build.sbt ...
[debug]         Load.resolveProject(formation_spark_idsi) took 159.3991ms
[debug]       Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, plugins: List(<none>))) took 191.5095ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: (formation_spark_idsi)
[debug]     Load.loadUnit: loadedProjectsRaw took 1830.8435ms
[debug]     Load.loadUnit: cleanEvalClasses took 730.1498ms
[debug]   Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/, ...) took 29315.7665ms
[debug] Load.apply: load took 29325.672ms
[debug] Load.apply: resolveProjects took 0.311ms
[debug] Load.apply: finalTransforms took 184.5063ms
[debug] Load.apply: config.delegates took 3.1347ms
[debug] Load.apply: Def.make(settings)... took 460.3939ms
[debug] Load.apply: structureIndex took 211.2323ms
[debug] Load.apply: mkStreams took 0.0135ms
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58307 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58307, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(idea-shell, None, None)
