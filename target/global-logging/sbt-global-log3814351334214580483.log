[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\UTC\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\UTC\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 122.7057ms
[debug]       Load.loadUnit: defsScala took 0.382ms
[debug] [Loading] Scanning directory C:\Users\UTC\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\UTC\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.1629 ms
[debug]           Load.resolveProject(global-plugins) took 54.3703ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\UTC\.sbt\1.0\plugins, plugins: List(<none>))) took 104.655ms
[debug] [Loading] Done in C:\Users\UTC\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 126.9733ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3392ms
[debug]     Load.loadUnit(file:/C:/Users/UTC/.sbt/1.0/plugins/, ...) took 259.7842ms
[debug]   Load.apply: load took 462.7915ms
[debug]   Load.apply: resolveProjects took 8.8641ms
[debug]   Load.apply: finalTransforms took 67.5463ms
[debug]   Load.apply: config.delegates took 10.5094ms
[debug]   Load.apply: Def.make(settings)... took 941.0491ms
[debug]   Load.apply: structureIndex took 367.3981ms
[debug]   Load.apply: mkStreams took 7.746ms
[info] loading global plugins from C:\Users\UTC\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4940.1055ms
[debug]           Load.loadUnit: plugins took 21.7629ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI\project
[debug]             Load.loadUnit: mkEval took 7.2489ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.266 ms
[info] loading settings for project formation_spark_idsi-build from idea.sbt ...
[debug]               Load.resolveProject(formation_spark_idsi-build) took 3.9114ms
[debug]             Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi-build, base: C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI\project, plugins: List(<none>))) took 7.797ms
[debug] [Loading] Done in C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI\project, returning: (formation_spark_idsi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 143.6112ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.5329ms
[debug]         Load.loadUnit(file:/C:/Users/UTC/IdeaProjects/Formation_SPARK_IDSI/project/, ...) took 170.893ms
[debug]       Load.apply: load took 172.5953ms
[debug]       Load.apply: resolveProjects took 0.1549ms
[debug]       Load.apply: finalTransforms took 15.2328ms
[debug]       Load.apply: config.delegates took 0.5387ms
[debug]       Load.apply: Def.make(settings)... took 91.6382ms
[debug]       Load.apply: structureIndex took 32.5081ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 639.7284ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI
[debug]       Load.loadUnit: mkEval took 0.2591ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6819 ms
[info] loading settings for project formation_spark_idsi from build.sbt ...
[debug]         Load.resolveProject(formation_spark_idsi) took 25.49ms
[debug]       Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi, base: C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI, plugins: List(<none>))) took 29.4866ms
[debug] [Loading] Done in C:\Users\UTC\IdeaProjects\Formation_SPARK_IDSI, returning: (formation_spark_idsi)
[debug]     Load.loadUnit: loadedProjectsRaw took 107.3997ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.7251ms
[debug]   Load.loadUnit(file:/C:/Users/UTC/IdeaProjects/Formation_SPARK_IDSI/, ...) took 751.7778ms
[debug] Load.apply: load took 753.5405ms
[debug] Load.apply: resolveProjects took 0.2199ms
[debug] Load.apply: finalTransforms took 25.2097ms
[debug] Load.apply: config.delegates took 0.5444ms
[debug] Load.apply: Def.make(settings)... took 94.8005ms
[debug] Load.apply: structureIndex took 34.1364ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/UTC/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50135 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50135, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/UTC/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(idea-shell, None, None)
