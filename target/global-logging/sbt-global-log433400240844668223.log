[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_211)
[debug]       Load.loadUnit: plugins took 2079.5354ms
[debug]       Load.loadUnit: defsScala took 0.6ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 70.7768 ms
[debug]           Load.resolveProject(global-plugins) took 1164.216ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\AGRIDEM\.sbt\1.0\plugins, plugins: List(<none>))) took 1736.7312ms
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 2465.9849ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4677ms
[debug]     Load.loadUnit(file:/C:/Users/AGRIDEM/.sbt/1.0/plugins/, ...) took 4921.56ms
[debug]   Load.apply: load took 11087.6558ms
[debug]   Load.apply: resolveProjects took 15.9833ms
[debug]   Load.apply: finalTransforms took 512.7068ms
[debug]   Load.apply: config.delegates took 53.9347ms
[debug]   Load.apply: Def.make(settings)... took 4094.5894ms
[debug]   Load.apply: structureIndex took 755.8243ms
[debug]   Load.apply: mkStreams took 3.0955ms
[info] loading global plugins from C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 79458.874ms
[debug]           Load.loadUnit: plugins took 109.4567ms
[debug]           Load.loadUnit: defsScala took 0.011ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug]             Load.loadUnit: mkEval took 61.9323ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 43.8662 ms
[info] loading settings for project formation_spark_idsi-build from idea1.sbt ...
[debug]               Load.resolveProject(formation_spark_idsi-build) took 150.2898ms
[debug]             Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi-build, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, plugins: List(<none>))) took 221.1858ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: (formation_spark_idsi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1263.6313ms
[debug]           Load.loadUnit: cleanEvalClasses took 462.2861ms
[debug]         Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/project/, ...) took 1839.6843ms
[debug]       Load.apply: load took 1858.5478ms
[debug]       Load.apply: resolveProjects took 0.29ms
[debug]       Load.apply: finalTransforms took 73.2648ms
[debug]       Load.apply: config.delegates took 1.885ms
[debug]       Load.apply: Def.make(settings)... took 473.5065ms
[debug]       Load.apply: structureIndex took 67.4015ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 12640.9273ms
[debug]     Load.loadUnit: defsScala took 0.008ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI
[debug]       Load.loadUnit: mkEval took 0.6857ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 8.3616 ms
[info] loading settings for project formation_spark_idsi from build.sbt ...
[debug]         Load.resolveProject(formation_spark_idsi) took 45.9735ms
[debug]       Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, plugins: List(<none>))) took 56.684ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: (formation_spark_idsi)
[debug]     Load.loadUnit: loadedProjectsRaw took 950.1969ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.8486ms
[debug]   Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/, ...) took 13604.1175ms
[debug] Load.apply: load took 13609.7583ms
[debug] Load.apply: resolveProjects took 0.2216ms
[debug] Load.apply: finalTransforms took 67.7991ms
[debug] Load.apply: config.delegates took 0.6694ms
[debug] Load.apply: Def.make(settings)... took 275.7786ms
[debug] Load.apply: structureIndex took 52.9856ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58307 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58307, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(idea-shell, None, None)
