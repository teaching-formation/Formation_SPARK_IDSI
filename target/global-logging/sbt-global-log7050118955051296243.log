[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Tomate\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Tomate\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 66.1325ms
[debug]       Load.loadUnit: defsScala took 0.2149ms
[debug] [Loading] Scanning directory C:\Users\Tomate\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Tomate\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.7061 ms
[debug]           Load.resolveProject(global-plugins) took 35.4941ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Tomate\.sbt\1.0\plugins, plugins: List(<none>))) took 68.8331ms
[debug] [Loading] Done in C:\Users\Tomate\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 84.2133ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2621ms
[debug]     Load.loadUnit(file:/C:/Users/Tomate/.sbt/1.0/plugins/, ...) took 156.2071ms
[debug]   Load.apply: load took 296.0199ms
[debug]   Load.apply: resolveProjects took 6.1305ms
[debug]   Load.apply: finalTransforms took 41.2524ms
[debug]   Load.apply: config.delegates took 6.2964ms
[debug]   Load.apply: Def.make(settings)... took 260.6736ms
[debug]   Load.apply: structureIndex took 74.1598ms
[debug]   Load.apply: mkStreams took 1.3192ms
[info] loading global plugins from C:\Users\Tomate\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2067.0553ms
[debug]           Load.loadUnit: plugins took 16.8788ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Formation_SPARK_IDSI\project
[debug]             Load.loadUnit: mkEval took 7.1269ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Formation_SPARK_IDSI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7678 ms
[info] loading settings for project formation_spark_idsi-build from idea1.sbt ...
[debug]               Load.resolveProject(formation_spark_idsi-build) took 3.0571ms
[debug]             Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi-build, base: C:\Formation_SPARK_IDSI\project, plugins: List(<none>))) took 5.451ms
[debug] [Loading] Done in C:\Formation_SPARK_IDSI\project, returning: (formation_spark_idsi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1748.0246ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.0144ms
[debug]         Load.loadUnit(file:/C:/Formation_SPARK_IDSI/project/, ...) took 1770.8327ms
[debug]       Load.apply: load took 1772.0334ms
[debug]       Load.apply: resolveProjects took 0.075ms
[debug]       Load.apply: finalTransforms took 6.9751ms
[debug]       Load.apply: config.delegates took 0.2642ms
[debug]       Load.apply: Def.make(settings)... took 63.7095ms
[debug]       Load.apply: structureIndex took 20.068ms
[debug]       Load.apply: mkStreams took 0.0017ms
[info] loading project definition from C:\Formation_SPARK_IDSI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 20290.2915ms
[debug]     Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory C:\Formation_SPARK_IDSI
[debug]       Load.loadUnit: mkEval took 0.1538ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Formation_SPARK_IDSI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.7811 ms
[info] loading settings for project formation_spark_idsi from build.sbt ...
[debug]         Load.resolveProject(formation_spark_idsi) took 26.7392ms
[debug]       Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi, base: C:\Formation_SPARK_IDSI, plugins: List(<none>))) took 29.4971ms
[debug] [Loading] Done in C:\Formation_SPARK_IDSI, returning: (formation_spark_idsi)
[debug]     Load.loadUnit: loadedProjectsRaw took 1074.1952ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.0262ms
[debug]   Load.loadUnit(file:/C:/Formation_SPARK_IDSI/, ...) took 21372.2422ms
[debug] Load.apply: load took 21373.8232ms
[debug] Load.apply: resolveProjects took 0.1756ms
[debug] Load.apply: finalTransforms took 20.2313ms
[debug] Load.apply: config.delegates took 0.3056ms
[debug] Load.apply: Def.make(settings)... took 50.0292ms
[debug] Load.apply: structureIndex took 15.3736ms
[debug] Load.apply: mkStreams took 0.0016ms
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Formation_SPARK_IDSI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54313 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54313, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Formation_SPARK_IDSI/)
[debug] > Exec(idea-shell, None, None)
