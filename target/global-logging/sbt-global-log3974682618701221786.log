[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\AGRIDEM\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_211)
[debug]       Load.loadUnit: plugins took 451.0644ms
[debug]       Load.loadUnit: defsScala took 1.8607ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 66.5988 ms
[debug]           Load.resolveProject(global-plugins) took 220.4028ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\AGRIDEM\.sbt\1.0\plugins, plugins: List(<none>))) took 394.0092ms
[debug] [Loading] Done in C:\Users\AGRIDEM\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 470.8194ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7008ms
[debug]     Load.loadUnit(file:/C:/Users/AGRIDEM/.sbt/1.0/plugins/, ...) took 943.8733ms
[debug]   Load.apply: load took 4186.9642ms
[debug]   Load.apply: resolveProjects took 20.6609ms
[debug]   Load.apply: finalTransforms took 247.9195ms
[debug]   Load.apply: config.delegates took 22.8362ms
[debug]   Load.apply: Def.make(settings)... took 3597.9771ms
[debug]   Load.apply: structureIndex took 372.2533ms
[debug]   Load.apply: mkStreams took 19.8421ms
[info] loading global plugins from C:\Users\AGRIDEM\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 144335.6982ms
[debug]           Load.loadUnit: plugins took 333.5098ms
[debug]           Load.loadUnit: defsScala took 0.0059ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug]             Load.loadUnit: mkEval took 114.9975ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.6005 ms
[info] loading settings for project formation_spark_idsi-build from idea.sbt ...
[debug]               Load.resolveProject(formation_spark_idsi-build) took 10.4706ms
[debug]             Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi-build, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, plugins: List(<none>))) took 17.0039ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project, returning: (formation_spark_idsi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 12878.0041ms
[debug]           Load.loadUnit: cleanEvalClasses took 109.5004ms
[debug]         Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/project/, ...) took 13323.514ms
[debug]       Load.apply: load took 13326.9515ms
[debug]       Load.apply: resolveProjects took 0.3586ms
[debug]       Load.apply: finalTransforms took 28.0505ms
[debug]       Load.apply: config.delegates took 1.0489ms
[debug]       Load.apply: Def.make(settings)... took 302.5276ms
[debug]       Load.apply: structureIndex took 85.6422ms
[debug]       Load.apply: mkStreams took 0.004ms
[info] loading project definition from C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 22802.7037ms
[debug]     Load.loadUnit: defsScala took 0.0085ms
[debug] [Loading] Scanning directory C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI
[debug]       Load.loadUnit: mkEval took 0.6467ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.1502 ms
[info] loading settings for project formation_spark_idsi from build.sbt ...
[debug]         Load.resolveProject(formation_spark_idsi) took 83.4293ms
[debug]       Load.loadTransitive: finalizeProject(Project(id formation_spark_idsi, base: C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, plugins: List(<none>))) took 92.4372ms
[debug] [Loading] Done in C:\Users\AGRIDEM\IdeaProjects\Formation_SPARK_IDSI, returning: (formation_spark_idsi)
[debug]     Load.loadUnit: loadedProjectsRaw took 7351.8368ms
[debug]     Load.loadUnit: cleanEvalClasses took 1140.7693ms
[debug]   Load.loadUnit(file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/, ...) took 31297.7505ms
[debug] Load.apply: load took 31304.0757ms
[debug] Load.apply: resolveProjects took 0.2724ms
[debug] Load.apply: finalTransforms took 158.7333ms
[debug] Load.apply: config.delegates took 0.7111ms
[debug] Load.apply: Def.make(settings)... took 268.7692ms
[debug] Load.apply: structureIndex took 87.2953ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50883 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50883, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Formation_SPARK_IDSI (in build file:/C:/Users/AGRIDEM/IdeaProjects/Formation_SPARK_IDSI/)
[debug] > Exec(idea-shell, None, None)
[warn] In the last 6770 seconds, 25.896 (0,4%) were spent in GC. [Heap: 0,15GB free of 0,22GB, max 1,33GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
